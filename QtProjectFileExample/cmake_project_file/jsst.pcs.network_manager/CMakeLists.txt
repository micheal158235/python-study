# CMakeList.txt: pcs的CMake项目，包括源和定义
# 此处特定于项目的逻辑

cmake_minimum_required (VERSION 3.8)

PROJECT ("jsst.pcs.network_manager")
IF (NOT mysql_interface_DIR)
    SET (mysql_interface_DIR ${CMAKE_SOURCE_DIR}/jsst.utils/mysql_interface)
ENDIF ()
IF (IS_DIRECTORY ${mysql_interface_DIR})
    #ADD_SUBDIRECTORY (${mysql_interface_DIR} mysql_interface_DIR.out)
ELSE ()
    MESSAGE (FATAL_ERROR "INVALID FOLDER mysql_interface_DIR=${mysql_interface_DIR}")
ENDIF ()

#设置对c++11 支持
SET (CMAKE_CXX_FLAGS "$CMAKE_CXX_FLAGS" -std=c++0x)
	
#添加宏
OPTION (USE_MACRO "Build the project using macro" ON)
IF (USE_MACRO)
    IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
	    ADD_DEFINITIONS("-D_DEBUG" "-DJSSTPCSNETWORKMANAGER_EXPORTS" "-D_WINDOWS" "-D_USRDLL" "-DWIN32" "-D_WIN32" "-D_CRT_SECURE_NO_WARNINGS")
	ELSE (CMAKE_SYSTEM_NAME MATCHES "Windows")
	    ADD_DEFINITIONS("-D_DEBUG")
	ENDIF ()
ENDIF (USE_MACRO)

#收集c/c++文件并赋值给变量SRC_LIST_CPP
#FILE (GLOB SRC_DIAGNOSE_LIST_CPP ${PROJECT_SOURCE_DIR}/auto_diagnose/*.cpp $)
#FILE (GLOB SRC_ALARM_LIST_CPP ${PROJECT_SOURCE_DIR}/service_alarm/*.cpp $)
#SET  (GLOB SRC_DIAGNOSE_LIST_SRCS ${PROJECT_SOURCE_DIR}/auto_diagnose/auto_diag_commsetting.cpp)
#set  (SRC_ALARM_LIST_SRCS ${PROJECT_SOURCE_DIR}/service_alarm/pcs_alarm.cpp)
AUX_SOURCE_DIRECTORY (${PROJECT_SOURCE_DIR}/auto_diagnose SRC_DIAGNOSE_LIST_SRCS)
AUX_SOURCE_DIRECTORY (${PROJECT_SOURCE_DIR}/service_alarm/ SRC_ALARM_LIST_SRCS)

#指定头文件路径
INCLUDE_DIRECTORIES (${PROJECT_CURRENT_SOURCE_DIR}auto_diagnose/)
INCLUDE_DIRECTORIES (${PROJECT_CURRENT_SOURCE_DIR})service_alarm/)
INCLUDE_DIRECTORIES (${PROJECT_CURRENT_SOURCE_DIR})../jsst.utils/mysql_interface)

#指定输出目录
SET (LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/pcsoutput)

MESSAGE (STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}.")
MESSAGE (STATUS "CMAKE_SOURCE_DIR = ${CMAKE_SOURCE_DIR}.")
MESSAGE (STATUS "PROJECT_CURRENT_SOURCE_DIR = ${PROJECT_CURRENT_SOURCE_DIR}.")
MESSAGE (STATUS "PROJECT_SOURCE_DIR = ${PROJECT_SOURCE_DIR}.")
MESSAGE {STATUS "LIBRARY_OUTPUT_PATH = ${LIBRARY_OUT_PATH}."}
MESSAGE (STATUS "BINARY_OUTPUT_PATH = ${BINARY_OUTPUT_PATH}.")

MESSAGE (STATUS "CMAKE_CURRENT_BINARY_PATH = ${CMAKE_CURRENT_BINARY_PATH}.")
MESSAGE (STATUS "CMAKE_CURRENT_SOURCE_PATH = ${CMAKE_CURRENT_SOURCE_PATH}.")
MESSAGE (STATUS "CMAKE_CURRENT_LIST_PATH = ${CMAKE_CURRENT_LIST_PATH}.")
MESSAGE (STATUS "CMAKE_CURRENT_LIST_LINE = ${CMAKE_CURRENT_LIST_LINE}.")
MESSAGE (STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}.")

#添加链接库路径
LINK_DIRECTORIES (${LIBRARY_OUTPUT_PATH})
LINK_DIRECTORIES (${PROJECT_SOURCE_DIR}/auto_diagnose/NMSDK/windows/sys/x64/debug)
LINK_DIRECTORIES (${PROJECT_SOURCE_DIR}/../jsst.utils/mysql_interface/lib64/debug)

#(WIN32 AND NOT MINGW)
MESSAGE (STATUS "VS_CONFIGURATION_TYPE = $(VS_CONFIGURATION_TYPE)")
IF (VS_CONFIGURATION_TYPE MATCHES "Debug")
    MESSAGE (STATUS "123456}.")
ELSEIF (VS_CONFIGURATION_TYPE MATCHES "RelWithDebInfo")
    MESSAGE (STATUS "1456}.")
ENDIF ()

IF (WIN32)
    IF (CMAKE_BUILD_TYPE MATCHES "Debug")
	    MESSAGE (STATUS "00000}.")
		IF (CMAKE_CL_64)
		    LINK_DIRECTORIES ($(PROJECT_SOURCE_DIR)/auto_diagnose/NMSDK/windows/sys/x64/debug)
			LINK_DIRECTORIES ($(PROJECT_SOURCE_DIR)/../jsst.utils/mysql_interface/lib64/debug)
		ELSE (CMAKE_CL_64)
		    LINK_DIRECTORIES ($(PROJECT_SOURCE_DIR)/NMSDK/windows/sys/x86/debug)
		ENDIF (CMAKE_CL_64)
	ELSEIF (CMAKE_BUILD_TYPE MATCHES "Release")
	    MESSAGE (STATUS "111111111}.")
        IF (CMAKE_CL_64)
		    MESSAGE (STATUS "2222222222}.")
			LINK_DIRECTORIES (${PROJECT_SOURCE_DIR}/NMSDK/windows/sys/release)
		ELSE (CMAKE_CL_64)
		    MESSAGE (STATUS "33333333333")
			LINK_DIRECTORIES (${PROJECT_SOURCE_DIR}/NMSDK/windows/sys/x86/release)
	    ENDIF (CMAKE_CL_64)
	ELSE ()
	    MESSAGE (STAUS "444444444444")
	ENDIF
ELSEIF (UNIX)
    LINK_DIRECTORIES (${PROJECT_SOURCE_PATH}/NMSDK/linux&arm-hisiv400/sys/linux)
ELSE ()
    LINK_DIRECTORIES (${PROJECT_SOURCE_PATH}/NMSDK/linux&arm-hisiv400/sys/hisiv400)
ENDIF ()

#添加静态链接库。需要在AAD_LIBRARY之前.
#LINK_LIBRARIES (libmysql)

#将源添加到此项目的库文件。不加SHARED就编译成静态库
#注意---此句需放在LINK_DIRECTORIES之后，并且在TARGET_LINK_LIBRARIES之前，否则链接不到库！！！
ADD_LIBRARY (${PROJECT_NAME} SHARED ${SRC_DIAGNOSE_LIST_SRCS} ${SRC_ALARM_SRCS})

#添加工程内动态链接库
TARGET_LINK_LIBRARIES (${PROJECT_NAME} mysql_interface)
TARGET_LINK_LIBRARIES (${PROJECT_NAME} libctcs.log4cpp)
TARGET_LINK_LIBRARIES (${PROJECT_NAME} libjsst.pcs.device_proxy)
TARGET_LINK_LIBRARIES (${PROJECT_NAME} nmsdk)
TARGET_LINK_LIBRARIES (${PROJECT_NAME} libmysql)

#添加第三方库引用
#FIND_PACKAGE (libmysql)
#IF (libmysql_FOUND)
#    INCLUDE_DIRECTORIES (${libmysql_INCLUDE_DIR})
#    TARGET_LINK_LIBRARIES (${PROJECT_NAME} ${libmysql_LIBRARY})
#ELSE ()
#    MESSAGE (STATUS "CANNOT FIND MYSQL LIBRARY")
#ENDIF ()

# TODO:如有需要，请添加测试并安装目标






























